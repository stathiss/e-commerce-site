# Generated by Django 2.0 on 2018-02-26 20:45

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_parent', models.BooleanField(default=False, verbose_name='parent status')),
                ('is_provider', models.BooleanField(default=False, verbose_name='provider status')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=256)),
                ('event_date', models.DateTimeField(verbose_name='event date')),
                ('date_added', models.DateTimeField(verbose_name='Date added')),
                ('capacity', models.IntegerField()),
                ('availability', models.IntegerField()),
                ('location', models.TextField(max_length=256)),
                ('latitude', models.DecimalField(decimal_places=5, max_digits=7)),
                ('longitude', models.DecimalField(decimal_places=5, max_digits=7)),
                ('age_range', models.CharField(choices=[('0005', '0-5'), ('0609', '6-9'), ('1012', '10-12'), ('1314', '13-14')], default='0005', max_length=4)),
                ('event_type', models.CharField(choices=[('1', 'Παιδικά θέατρα'), ('2', 'Συναυλίες'), ('3', 'Παιδότοποι'), ('4', 'Πάρτυ'), ('5', 'Εκπαιδευτικές εκδρομές/εκδηλώσεις'), ('6', 'Αθλητικές δραστηριότητες'), ('7', 'Πάρκα αναψυχής'), ('8', 'Παιδικές κατασκηνώσεις')], default='1', max_length=1)),
                ('cost', models.IntegerField()),
                ('hits', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='review date')),
                ('content', models.TextField()),
                ('rating', models.IntegerField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TagEventAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Event')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Purchase date')),
                ('amount', models.IntegerField()),
                ('total_cost', models.IntegerField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('user', models.OneToOneField(default='', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('email', models.EmailField(default='', max_length=254)),
                ('full_name', models.TextField()),
                ('address', models.TextField(default='')),
                ('coins', models.IntegerField(default=0)),
                ('latitude', models.DecimalField(decimal_places=5, max_digits=7)),
                ('longitude', models.DecimalField(decimal_places=5, max_digits=7)),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('user', models.OneToOneField(default='', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('full_name', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField(default='')),
                ('afm', models.TextField()),
                ('doy', models.TextField()),
                ('legal_representative', models.TextField()),
                ('adt', models.TextField()),
                ('site', models.URLField()),
                ('logo', models.ImageField(upload_to='media/')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Parent'),
        ),
        migrations.AddField(
            model_name='review',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Parent'),
        ),
        migrations.AddField(
            model_name='event',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.Provider'),
        ),
    ]
